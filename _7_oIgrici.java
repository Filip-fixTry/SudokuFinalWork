package zavrsnirad;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;

/**
 *
 * @author Filip Božović
 */
public class _7_oIgrici extends javax.swing.JFrame {

    private JLabel autorLabel;
    private JToggleButton dugmeNazad;
    private JToggleButton dugmeUputstvo;
    private JLabel ikonicaLabel;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JTextArea opisTextArea;

    /**
     * Creates new form _7_oIgrici
     */
    public _7_oIgrici() {
        initComponents();
        setPozadina();
        this.opisTextArea.setBackground(new Color(255, 255, 255, 20));
        podesiJezik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.jPanel1 = new JPanel();
		 this.dugmeNazad = new JToggleButton();
		 this.autorLabel = new JLabel();
		 this.ikonicaLabel = new JLabel();
		 this.jScrollPane1 = new JScrollPane();
		 this.opisTextArea = new JTextArea();
		 this.dugmeUputstvo = new JToggleButton();
		 setDefaultCloseOperation(3);
		 setTitle("O igrici");
		 setResizable(false);
		 this.dugmeNazad.setFont(_3_sudoku9x9.fontDugme);
		 this.dugmeNazad.setText("Nazad");
		 this.dugmeNazad.setFocusable(false);
		 this.dugmeNazad.addActionListener(new ActionListener() {
			   public void actionPerformed(ActionEvent evt) {
				 _7_oIgrici.this.dugmeNazadActionPerformed(evt);
			   }
			 });
		 this.autorLabel.setFont(_3_sudoku9x9.font25);
		 this.autorLabel.setText("Igru napravio Filip Božović");
		 this.ikonicaLabel.setIcon(new ImageIcon(getClass().getResource("/zavrsnirad/slike/ikonica.png")));
		 this.jScrollPane1.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));
		 this.jScrollPane1.setHorizontalScrollBarPolicy(31);
		 this.jScrollPane1.setFocusable(false);
		 this.opisTextArea.setEditable(false);
		 this.opisTextArea.setColumns(20);
		 this.opisTextArea.setFont(new Font("Monospaced", 0, 12));
		 this.opisTextArea.setLineWrap(true);
		 this.opisTextArea.setRows(5);
		 this.opisTextArea.setText("Sudoku (数独, sudoku) je kombinatorna slagalica za postavljanje brojeva zasnovana na logici. Cilj je popuniti matricu veličine 9x9 ciframa, tako da svaka kolona, svaki red i svaki od devet 3x3 podkvadrata (koji se takođe nazivaju „kutije“, „blokovi“ ili „regioni“), sadrži sve cifre od 1 do 9.");
		 this.opisTextArea.setWrapStyleWord(true);
		 this.opisTextArea.setBorder((Border)null);
		 this.opisTextArea.setFocusable(false);
		 this.jScrollPane1.setViewportView(this.opisTextArea);
		 this.dugmeUputstvo.setFont(_3_sudoku9x9.fontDugme);
		 this.dugmeUputstvo.setText("Uputstvo");
		 this.dugmeUputstvo.setFocusable(false);
		 this.dugmeUputstvo.addActionListener(new ActionListener() {
			   public void actionPerformed(ActionEvent evt) {
				 _7_oIgrici.this.dugmeUputstvoActionPerformed(evt);
			   }
			 });
		 GroupLayout jPanel1Layout = new GroupLayout(this.jPanel1);
		 this.jPanel1.setLayout(jPanel1Layout);
		 jPanel1Layout.setHorizontalGroup(jPanel1Layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(jPanel1Layout.createSequentialGroup()
			   .addContainerGap()
			   .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(jPanel1Layout.createSequentialGroup()
				   .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
					 .addComponent(this.ikonicaLabel)
					 .addGroup(jPanel1Layout.createSequentialGroup()
					   .addGap(10, 10, 10)
					   .addComponent(this.dugmeUputstvo, -2, 110, -2)))
				   .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
				   .addComponent(this.jScrollPane1, -1, 222, 32767))
				 .addGroup(jPanel1Layout.createSequentialGroup()
				   .addGap(0, 0, 32767)
				   .addComponent(this.autorLabel, -2, 267, -2)
				   .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
				   .addComponent(this.dugmeNazad, -2, 71, -2)))
			   .addContainerGap()));
		 jPanel1Layout.setVerticalGroup(jPanel1Layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
			   .addContainerGap()
			   .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
				 .addGroup(jPanel1Layout.createSequentialGroup()
				   .addComponent(this.ikonicaLabel)
				   .addGap(38, 38, 38)
				   .addComponent(this.dugmeUputstvo)
				   .addGap(0, 23, 32767))
				 .addComponent(this.jScrollPane1))
			   .addGap(21, 21, 21)
			   .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				 .addComponent(this.dugmeNazad)
				 .addComponent(this.autorLabel))
			   .addContainerGap()));
		 GroupLayout layout = new GroupLayout(getContentPane());
		 getContentPane().setLayout(layout);
		 layout.setHorizontalGroup(layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(layout.createSequentialGroup()
			   .addContainerGap()
			   .addComponent(this.jPanel1, -1, -1, 32767)
			   .addContainerGap()));
		 layout.setVerticalGroup(layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(layout.createSequentialGroup()
			   .addContainerGap()
			   .addComponent(this.jPanel1, -1, -1, 32767)
			   .addContainerGap()));
		 pack();
		 setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dugmeNazadActionPerformed(ActionEvent evt) {
        _1_Menu s = new _1_Menu();
        _3_sudoku9x9.playSound("klik.wav");
        dispose();
        s.setVisible(true);
    }

    private void dugmeUputstvoActionPerformed(ActionEvent evt) {
        _8_uputstvo s = new _8_uputstvo();
        _3_sudoku9x9.playSound("klik.wav");
        dispose();
        s.setVisible(true);
    }

    private void setPozadina() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/zavrsnirad/slike/ikonica.png")));
    }

    private void podesiJezik() {
        if (_1_Menu.jezik) {
            this.autorLabel.setText("Igru napravio Filip Božović");
            this.dugmeNazad.setText("Nazad");
            this.dugmeUputstvo.setText("Uputstvo");
            this.opisTextArea.setText("Sudoku (数独, sudoku) je kombinatorna slagalica za postavljanje brojeva zasnovana na logici. Cilj je popuniti matricu veličine 9x9 ciframa, tako da svaka kolona, svaki red i svaki od devet 3x3 podkvadrata (koji se takođe nazivaju \"kutije\", \"blokovi\" ili \"regioni\"), sadrži sve cifre od 1 do 9.");
            setTitle("O igrici");
        } else {
            this.autorLabel.setText("A game made by Filip Božović");
            this.dugmeNazad.setText("Back");
            this.dugmeUputstvo.setText("Instruction");
            this.opisTextArea.setText("Sudoku (数 独, sudoku) is a combinatorial logic-based logic puzzle. The goal is to fill in a matrix of size 9x9 digits so that each column, each red and each of the nine 3x3 sub squares (also called \"boxes\", \"blocks\" or \"regions\") contains all digits from 1 through 9.");
            setTitle("About game");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(_7_oIgrici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(_7_oIgrici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(_7_oIgrici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(_7_oIgrici.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new _7_oIgrici().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
