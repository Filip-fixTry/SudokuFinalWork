package zavrsnirad;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.SoftBevelBorder;

/**
 *
 * @author Filip Božović
 */
public class _5_cestitamo extends javax.swing.JFrame {

    public static int[] nizIgraca;
    public static boolean cestitamo;
    public ArrayList<HajSkor> igraci = new ArrayList<>();
    private String nivoEng;
    private JLabel imeLabel;
    private JTextField imeTextField;
    private JPanel jPanel1;
    private JTextArea porukaTextArea;
    private JButton zavrsiDugme;

    /**
     * Creates new form _5_cestitamo
     */
    public _5_cestitamo() {
        initComponents();
        ispisiTextInformaciju();
        _3_sudoku9x9.playSound("Bravo1.wav");
        setPozadina();
        cestitamo = false;
        podesiJezik();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        this.jPanel1 = new JPanel();
		 this.imeTextField = new JTextField();
		 this.imeLabel = new JLabel();
		 this.zavrsiDugme = new JButton();
		 this.porukaTextArea = new JTextArea();
		 setDefaultCloseOperation(3);
		 setTitle("Čestitamo");
		 setResizable(false);
		 this.jPanel1.setBorder(new SoftBevelBorder(0));
		 this.imeTextField.setFont(new Font("Courier New", 0, 16));
		 this.imeTextField.setToolTipText("Ime ne sme sadržati brojeve u prvom karakteru i neodgovarajuće karaktere u celom tekstu.");
		 this.imeLabel.setFont(_3_sudoku9x9.fontDugme);
		 this.imeLabel.setHorizontalAlignment(4);
		 this.imeLabel.setText("Ime (nadimak)");
		 this.zavrsiDugme.setFont(_3_sudoku9x9.fontDugme);
		 this.zavrsiDugme.setText("Završi");
		 this.zavrsiDugme.addActionListener(new ActionListener() {
			   public void actionPerformed(ActionEvent evt) {
				 _5_cestitamo.this.zavrsiDugmeActionPerformed(evt);
			   }
			 });
		 this.porukaTextArea.setEditable(false);
		 this.porukaTextArea.setBackground(new Color(240, 240, 240));
		 this.porukaTextArea.setColumns(20);
		 this.porukaTextArea.setFont(_3_sudoku9x9.fontIgre1);
		 this.porukaTextArea.setLineWrap(true);
		 this.porukaTextArea.setRows(5);
		 this.porukaTextArea.setTabSize(1);
		 this.porukaTextArea.setText("Ćestitamo, rešili ste sudoku za to vreme na tom nivou!");
		 this.porukaTextArea.setBorder((Border)null);
		 this.porukaTextArea.setCursor(new Cursor(2));
		 this.porukaTextArea.setOpaque(false);
		 GroupLayout jPanel1Layout = new GroupLayout(this.jPanel1);
		 this.jPanel1.setLayout(jPanel1Layout);
		 jPanel1Layout.setHorizontalGroup(jPanel1Layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(jPanel1Layout.createSequentialGroup()
			   .addGap(19, 19, 19)
			   .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
				 .addComponent(this.zavrsiDugme, -2, 104, -2)
				 .addComponent(this.porukaTextArea, -2, -1, -2))
			   .addContainerGap(21, 32767))
			 .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			   .addGroup(jPanel1Layout.createSequentialGroup()
				 .addGap(22, 22, 22)
				 .addComponent(this.imeLabel, -2, 116, -2)
				 .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
				 .addComponent(this.imeTextField, -2, 256, -2)
				 .addContainerGap(22, 32767))));
		 jPanel1Layout.setVerticalGroup(jPanel1Layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(jPanel1Layout.createSequentialGroup()
			   .addGap(26, 26, 26)
			   .addComponent(this.porukaTextArea, -2, 160, -2)
			   .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 111, 32767)
			   .addComponent(this.zavrsiDugme, -2, 33, -2)
			   .addGap(24, 24, 24))
			 .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
			   .addGroup(jPanel1Layout.createSequentialGroup()
				 .addGap(200, 200, 200)
				 .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
				   .addComponent(this.imeTextField, -2, 33, -2)
				   .addComponent(this.imeLabel, -2, 33, -2))
				 .addContainerGap(120, 32767))));
		 GroupLayout layout = new GroupLayout(getContentPane());
		 getContentPane().setLayout(layout);
		 layout.setHorizontalGroup(layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(layout.createSequentialGroup()
			   .addContainerGap()
			   .addComponent(this.jPanel1, -1, -1, 32767)
			   .addContainerGap()));
		 layout.setVerticalGroup(layout
			 .createParallelGroup(GroupLayout.Alignment.LEADING)
			 .addGroup(layout.createSequentialGroup()
			   .addContainerGap()
			   .addComponent(this.jPanel1, -2, -1, -2)
			   .addContainerGap(-1, 32767)));
		 pack();
		 setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void zavrsiDugmeActionPerformed(ActionEvent evt) {
        _3_sudoku9x9.playSound("klik.wav");
        proveriUpis();
    }

    private void ispisiTextInformaciju() {
        this.porukaTextArea.setBackground(new Color(240, 240, 240, 0));
        if (_2_Podesavanja.nivo.equals("laganom")) {
            this.nivoEng = "easy";
        } else if (_2_Podesavanja.nivo.equals("srednjem")) {
            this.nivoEng = "medium";
        } else {
            this.nivoEng = "hard";
        }
        if (_2_Podesavanja.tipSudoku.equals("9x9")) {
            if (_3_sudoku9x9.vreme.getSati() > 0) {
                if (_1_Menu.jezik) {
                    this.porukaTextArea.setText("\n Čestitamo, rešili ste sudoku 9x9\n\tza " + _3_sudoku9x9.vreme.getSati() + "h " + _3_sudoku9x9.vreme.getMinuta() + "m " + _3_sudoku9x9.vreme.getSekundi() + "s na " + _2_Podesavanja.nivo + " nivou!");
                } else {
                    this.porukaTextArea.setText("\t Congratulations, you solved \n\t\t\t\t\t  sudoku 9x9\n\t for " + _3_sudoku9x9.vreme.getSati() + "h " + _3_sudoku9x9.vreme.getMinuta() + "m " + _3_sudoku9x9.vreme.getSekundi() + "s on " + this.nivoEng + " level!");
                }
            } else if (_1_Menu.jezik) {
                this.porukaTextArea.setText("\n Čestitamo, rešili ste sudoku 9x9\n\t za " + _3_sudoku9x9.vreme.getMinuta() + "m i " + _3_sudoku9x9.vreme.getSekundi() + "s na " + _2_Podesavanja.nivo + " nivou!");
            } else {
                this.porukaTextArea.setText("\tCongratulations, you solved \n\t\t\t\t\t sudoku 9x9\n\t for " + _3_sudoku9x9.vreme.getMinuta() + "m i " + _3_sudoku9x9.vreme.getSekundi() + "s on " + this.nivoEng + " level!");
            }
        } else if (_4_sudoku6x6.vreme1.getSati() > 0) {
            if (_1_Menu.jezik) {
                this.porukaTextArea.setText("\n Čestitamo, rešili ste sudoku 6x6\n\tza " + _4_sudoku6x6.vreme1.getSati() + "h " + _4_sudoku6x6.vreme1.getMinuta() + "m " + _4_sudoku6x6.vreme1.getSekundi() + "s na " + _2_Podesavanja.nivo + " nivou!");
            } else {
                this.porukaTextArea.setText("\t Congratulations, you solved \n\t\t\t\t\t  sudoku 6x6\n\t for " + _4_sudoku6x6.vreme1.getSati() + "h " + _4_sudoku6x6.vreme1.getMinuta() + "m " + _4_sudoku6x6.vreme1.getSekundi() + "s on " + this.nivoEng + " level!");
            }
        } else if (_1_Menu.jezik) {
            this.porukaTextArea.setText("\n Čestitamo, rešili ste sudoku 6x6\n\t za " + _4_sudoku6x6.vreme1.getMinuta() + "m i " + _4_sudoku6x6.vreme1.getSekundi() + "s na " + _2_Podesavanja.nivo + " nivou!");
        } else {
            this.porukaTextArea.setText("\t Congratulations, you solved \n\t\t\t\t\t  sudoku 6x6\n\t for " + _4_sudoku6x6.vreme1.getMinuta() + "m i " + _4_sudoku6x6.vreme1.getSekundi() + "s on " + this.nivoEng + " level!");
        }
    }

    private void proveriUpis() {
        Pattern p = Pattern.compile("\\W.*", 256);
        Pattern p1 = Pattern.compile(".*\\W.*", 256);
        if (_2_Podesavanja.tipSudoku.equals("9x9")) {
            if (this.imeTextField.getText().length() > 0) {
                if (this.imeTextField.getText().matches("\\d.*")) {
                    _3_sudoku9x9.playSound("error.wav");
                    if (_1_Menu.jezik) {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter sadrzi broj, promeni ime!", "Obaveštenje", 2);
                    } else {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "The first character contains the number, change name!", "Information", 2);
                    }
                } else if (this.imeTextField.getText().matches("\\s.*")) {
                    _3_sudoku9x9.playSound("error.wav");
                    if (_1_Menu.jezik) {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter sadrzi space, promeni ime!", "Obaveštenje", 2);
                    } else {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "The first character contains space, change name!", "Information", 2);
                    }
                } else if (p.matcher(this.imeTextField.getText()).matches()) {
                    _3_sudoku9x9.playSound("error.wav");
                    if (_1_Menu.jezik) {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter mora biti slovo, promeni ime!", "Obaveštenje", 2);
                    } else {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "The first character must be a letter, change name!", "Information", 2);
                    }
                } else if (this.imeTextField.getText().matches(".*\\s.*")) {
                    _3_sudoku9x9.playSound("error.wav");
                    if (_1_Menu.jezik) {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Ime sadrži space, promeni ime!", "Obaveštenje", 2);
                    } else {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Name contains space, change name!", "Information", 2);
                    }
                } else if (p1.matcher(this.imeTextField.getText()).matches()) {
                    _3_sudoku9x9.playSound("error.wav");
                    if (_1_Menu.jezik) {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Ime sadrži neodgovarajuće znakove, promeni ime!", "Obaveštenje", 2);
                    } else {
                        int obavestenje = JOptionPane.showConfirmDialog(this, "Name contains inappropriate characters, change name!", "Information", 2);
                    }
                } else {
                    _1_Menu m = new _1_Menu();
                    this.igraci.add(new HajSkor(this.imeTextField.getText(), _3_sudoku9x9.vremeLabel.getText(), _2_Podesavanja.nivo, _2_Podesavanja.tipSudoku));
                    napraviUpisiJsonFajl();
                    cestitamo = true;
                    dispose();
                    m.setVisible(true);
                }
            } else {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Niste uneli ime ili nadimak!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "You didn't enter a name or nickname!", "Information", 2);
                }
            }
        } else if (this.imeTextField.getText().length() > 0) {
            if (this.imeTextField.getText().matches("\\d.*")) {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter sadrzi broj, promeni ime!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "The first character contains the number, change name!", "Information", 2);
                }
            } else if (this.imeTextField.getText().matches("\\s.*")) {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter sadrzi space, promeni ime!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "The first character contains space, change name!", "Information", 2);
                }
            } else if (p.matcher(this.imeTextField.getText()).matches()) {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Prvi karakter mora biti slovo, promeni ime!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "The first character must be a letter, change name!", "Information", 2);
                }
            } else if (this.imeTextField.getText().matches(".*\\s.*")) {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Ime sadrži space, promeni ime!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Name contains space, change name!", "Information", 2);
                }
            } else if (p1.matcher(this.imeTextField.getText()).matches()) {
                _3_sudoku9x9.playSound("error.wav");
                if (_1_Menu.jezik) {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Ime sadrži neodgovarajuće znakove, promeni ime!", "Obaveštenje", 2);
                } else {
                    int obavestenje = JOptionPane.showConfirmDialog(this, "Name contains inappropriate characters, change name!", "Information", 2);
                }
            } else {
                _1_Menu m = new _1_Menu();
                this.igraci.add(new HajSkor(this.imeTextField.getText(), _4_sudoku6x6.vremeLabel1.getText(), _2_Podesavanja.nivo, _2_Podesavanja.tipSudoku));
                napraviUpisiJsonFajl();
                cestitamo = true;
                dispose();
                m.setVisible(true);
            }
        } else {
            _3_sudoku9x9.playSound("error.wav");
            if (_1_Menu.jezik) {
                int obavestenje = JOptionPane.showConfirmDialog(this, "Niste uneli ime ili nadimak!", "Obaveštenje", 2);
            } else {
                int i = JOptionPane.showConfirmDialog(this, "You didn't enter a name or nickname!", "Information", 2);
            }
        }
    }

    private void napraviUpisiJsonFajl() {
        Gson gson = (new GsonBuilder()).setPrettyPrinting().create();
        String jsonText = "", izlaz = "";
        try {
            File fajl = new File(_5_cestitamo.class.getResource("najboljiIgrac.json").getFile());
            String datoteka = _5_cestitamo.class.getResource("najboljiIgrac.json").getPath();
            datoteka = datoteka.replaceFirst("file:/", "");
            datoteka = datoteka.replace("/", "\\");
            datoteka = datoteka.replace("%20", " ");
            if (datoteka.startsWith("jar:")) {
                datoteka = datoteka.replaceFirst("jar:", "");
            }
            datoteka = datoteka.replace("ZavrsniRad.jar!\\zavrsnirad\\najboljiIgrac.json", "zavrsnirad\\najboljiIgrac.json");
            System.out.println(fajl.getAbsolutePath() + "\n" + datoteka + "\n");
            File nfajl = new File(datoteka);
            if (!nfajl.exists()) {
                String tmpdat = datoteka.replace("najboljiIgrac.json", "");
                (new File(tmpdat)).mkdir();
                nfajl.createNewFile();
                System.out.println("Napravljen json fajl.");
            }
            ArrayList<HajSkor> igraciTempirani = (ArrayList<HajSkor>) gson.fromJson(FileRWrite.read(datoteka), (new TypeToken<ArrayList<HajSkor>>() {

            }).getType());
            InputStream inStream = new FileInputStream(datoteka);
            InputStreamReader fr = new InputStreamReader(inStream);
            BufferedReader br = new BufferedReader(fr);
            String tmp = "";
            while ((tmp = br.readLine()) != null) {
                jsonText = jsonText + tmp + "\n";
            }
            PrintWriter wr1 = new PrintWriter(datoteka);
            if (jsonText.length() > 0) {
                wr1.close();
                for (HajSkor tmpIgrac : this.igraci) {
                    igraciTempirani.add(tmpIgrac);
                }
                this.igraci.clear();
                this.igraci = igraciTempirani;
                snimiListe(datoteka, this.igraci);
            } else {
                snimiListe(datoteka, this.igraci);
            }
            System.out.println(this.igraci.size());
            if (igraciTempirani != null) {
                igraciTempirani.clear();
            }
            inStream.close();
            br.close();
            fr.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static void snimiListe(String imeFajla, ArrayList<HajSkor> lista) {
        Gson gson = (new GsonBuilder()).setPrettyPrinting().create();
        FileRWrite.write(imeFajla, gson.toJson(lista));
    }

    public static ArrayList<HajSkor> citajListe(String imeFajla) {
        Gson gson = (new GsonBuilder()).setPrettyPrinting().create();
        return (ArrayList<HajSkor>) gson.fromJson(FileRWrite.read(imeFajla), (new TypeToken<ArrayList<HajSkor>>() {

        }).getType());
    }

    private void setPozadina() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/zavrsnirad/slike/ikonica.png")));
    }

    public static String readWithInput(String fileName) {
        String izlaz = "";
        try {
            File fajl = new File(_5_cestitamo.class.getResource(fileName).getFile());
            String dat = fajl.getAbsolutePath();
            dat = dat.replaceFirst("file:/", "");
            InputStream in = _5_cestitamo.class.getResourceAsStream(fileName);
            InputStreamReader streamReader = new InputStreamReader(_5_cestitamo.class.getResourceAsStream(fileName));
            BufferedReader reader = new BufferedReader(streamReader);
            String line;
            while ((line = reader.readLine()) != null) {
                izlaz = izlaz + line + "\n";
            }
            reader.close();
            streamReader.close();
            in.close();
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(FileRWrite.class.getName()).log(Level.SEVERE, (String) null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FileRWrite.class.getName()).log(Level.SEVERE, (String) null, ex);
        }
        return izlaz;
    }

    public static void runtimeExec(String komanda) {
        try {
            Process proc = Runtime.getRuntime().exec(komanda);
            InputStream stderr = proc.getErrorStream();
            InputStreamReader isr = new InputStreamReader(stderr);
            BufferedReader br = new BufferedReader(isr);
            String line = null;
            System.out.println("<Komanda pokrenuta>");
            while ((line = br.readLine()) != null) {
                System.out.println(line);
            }
            System.out.println("</Komanda zavrsena>");
            int exitVal = proc.waitFor();
            System.out.println("Process izlaznaVrednost: " + exitVal);
        } catch (IOException | InterruptedException t) {
            t.printStackTrace();
        }
    }

    private void podesiJezik() {
        if (_1_Menu.jezik) {
            this.imeLabel.setText("Ime(nadimak):");
            this.zavrsiDugme.setText("Završi");
            setTitle("Čestitamo");
            this.imeTextField.setToolTipText("Ime ne sme sadržati brojeve u prvom karakteru i neodgovarajuće karaktere u celom tekstu.");
        } else {
            this.imeLabel.setText("Name(nickname):");
            this.zavrsiDugme.setText("Finish");
            setTitle("Congratulation");
            this.imeTextField.setToolTipText("The name mustn't contain numbers in the first character and inappropriate characters throughout the text.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(_5_cestitamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(_5_cestitamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(_5_cestitamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(_5_cestitamo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new _5_cestitamo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
